 

// All STL containers are passed by value in a function, arrays by default are passed by reference.

#include<iostream>  -> basic functions, I/O operations
#include<bits/stdc++.h>  -> master header file

#define ll long long
using namespace std;

cin>>
cout<<

// when number of inputs not known beforehand, stop at EOL

while(cin>>n){
  ....do some work
}


max(x,y) , min(x,y)
swap(int,int)  or swap(queue<int>q1, queue<int> q2)

int prefixProd[n]={1}; 	// array initialization, only first element

stoi("123") / atoi("123 makdd efef ")  gives 123, converts string to integer
atol, atoll -> converts to long and long long respectively

string pp = "1232323";
ll k = 39029302032;
for comaring with numbers, use  -> if(atol( pp.c_str() ) > k) { ...}

to_string(123) -> "123" for easy traversal across the string , for float numbers gives 8 bit representation padded with zeroes if required

rand() -> gives any random number
srand(time(0)) -> seeds the random number generator

rand()% (e-s+1) gives numbers from 0 to e-s 

*************************************************************************************************************************************************************************************

#include<string>  -> string containers

string s;
s.length()
s.erase()   // erases whole string, unlike vectors or sets in which clear function deletes all elements

string str="We think in generalities, but we live in details.";
str2 = str.substr (3,5);     // "think" , str.substr(pos,length) 
//The substring is the portion of the object that starts at character position pos and spans len characters (or until the end of the string, whichever comes first).

int idx = str2.find("live") -> returns starting index of the word live

reverse(str.begin(), str.end());

stoi(), stoll()  converts strings to integers or long long
to_string()   converts valid numbers to string form
toupper(), tolower()  converts string to upper or lower cases respectively
isalpha(), isdigit()  returns true/false according to the string passed

***********++++++++++++++++++++++++++++++++++++++++++++++++++++++

string s;
----------
s += "asd"; 	 O(1) time, only appends the new string.
s = s + "asd";	 O(length(s)) time as a new string is created by copying the old string and appending the additional string, then assigned to s.


**************************************************************************************************************************************************************************************
#include<vector>  -> vector containers
vector<vector<int>> dp(m,vector<int>(n,INT_MIN));

dp.push_back({1,34,2});
dp.pop_back();

dp.emplace_back({23,234}); // faster than push_back()
dp.erase(itr);
dp.clear();

reverse(v.begin(),v.end())


return type int, no dereferencing required for commands below
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

dp.front() -> fetches begin value of vector
dp.back() ->  fetches back value of vector


dereferencing required, as pointer to the address is given
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

dp.begin(),  dp.end()  -> iterators to the corresponding elements 


int gfg[] = { 5, 6, 7, 7, 6, 5, 5, 6 };
vector<int> v(gfg, gfg + 8); // 5 6 7 7 6 5 5 6

//ways to create deep copy of vectors, shallow-copy -> same memory location on heap, deep-copy -> newly allocated memory  on heap
vector<int>v1{2,432,1};
vector<int> v2(v1)  or vector<int> v2 , v2=v1;  

**************************************************************************************************************************************************************************************


#include<cstring>  -> memset to initialize locations with 0 or 1.

int dp[50][50][50];
memset(dp,-1,sizeof(dp));

strcpy(dest, src);  -> copies string from src to dest variable;

ex-> char name[100]; char*str="erere\0";
strcpy(name,str);

so 'name' becomes erere.


**************************************************************************************************************************************************************************************

#include<queue>  ->FIFO queue data structures
queue<int> q1;
queue<Node*> q2;
q.push(), q.pop(), q.front(), q.empty(), q.back()


#include<queue>
priority_queue<int> qq;    		// stores element in decreasing order, max-heap by default
qq.push(4), qq.push(7), qq.push(23) ;   // [23,7,4]

//  we can multiply the values with -1 and use max heap to get the effect of min heap.
// to declare min heap, elements sorted in ascending order, both have all other normal queue functions

// min-heap
priority_queue<int,vector<int>, greater<int>> mq;  
qq.push(4), qq.push(7), qq.push(23) ;   // [4,7,23]

//
class Car{
public:
    string id;
    int x,y;

    Car(int x, int y, string s){
        this->x=x;
        this->y = y;
        id=s;
    }

// const function declaration
    int dist() const{
        return x*x + y*y;
    }
};


class Compare {
public:
    bool operator()(const Car &a , const Car &b){
        return a.dist()<b.dist();
    }
};
priority_queue<Car, vector<Car>, Compare>pq(cars.begin(),cars.begin()+k);

// priority_queues with custom data structure


#include<deque>      -> doubly ended queue
deque<int> Q(k);  // deque of size k

Q.pop_back();
Q.pop_front();
Q.push_front(x);
Q.push_back(y);
Q.back()


**************************************************************************************************************************************************************************************

#include<stack>  -> LIFO stack data structure
stack<int> s;
s.pop(), s.push(), s.top(), s.empty()
peek() -> top element

**************************************************************************************************************************************************************************************

#include<climits>  -> for max-min value initializations
int a = INT_MAX;
int b = INT_MIN;
long int d = LONG_MAX;
long c = LONG_MIN;

**************************************************************************************************************************************************************************************


#include<algorithm>  -> basic sorting and other functions - sort/reverse

//comparing wrt to 2nd element in vector of pairs
bool compare(const pair<int,int> &a, const pair<int,int> &b){
	return a.second<=b.second;
}

vector<pair<int,int>> vec;
sort(vec.begin(), vec.end(), compare);   // compare function of return type bool to set sorting criterion;
reverse(vec.begin(), vec.end());

vector<int> arr1 = { 1, 4, 6, 3, 2 };   
vector<int> arr2 = { 1, 2, 4 };

// sort and reverse functions
sort(arr1.begin(), arr1.end());

// sorting with custom comparator inline
sort(arr2.begin(), arr2.end(), [&](const int x, const int y){
	return x-a <y-a;
});

reverse(arr.begin(), arr.end())
      
if(includes(arr1.begin(), arr1.end(), arr2.begin(), arr2.end()))
    cout << "All elements of 2nd container are in 1st container";
else 
    cout << "All elements of 2nd container are not in 1st container";

// containers should be sorted
returns -> True if every element of 2nd container lies in 1st container.


// max_element()  returns a pointer to the max element in the container or array
int x = *max_element(arr1); 

int vis = [1,34,1,5,7,0,29];
int x = * max_element(vis, vis+n)


// print the next  and previous permutations of a string

string s="234569";
do{
    cout<<s<<"\n";
   } while(next_permutation(s.begin(), s.end());


**************************************************************************************************************************************************************************************

#include<numeric>  -> some imp functions
__gcd(int a, int b) = to calculate the gcd of 2 no.s

int a = 133;
__builtin_popcount(a)  -> returns # of set bits in the binary representation of 'a'.
__builtin_clz(a) -> returns the leading zeroes in 32-bit representation of 'a'.
__builtin_ctz(a) -> returns the trailing zeroes in 32-bit representation of 'a'.


**************************************************************************************************************************************************************************************

#include<utility>  -> some utility functions
pair<int,int> p = {2,4);
make_pair(45,10)

vector<pair<int,int>>vec;
pair<int,pair<int,int>>pp;

**************************************************************************************************************************************************************************************

#include<set>  -> for set data structure, to keep unique elements in sorted manner

set<int>s ;
set<char> sch;
sch.insert('d');
s.find(12);   //returns s.end() if not found.
s.insert(1);
s,erase(iterator);
s.clear();

// example of storing custom data structure elements in a set, we need to overload operator function to provide sorting condition
class Node{
    public:
    int x, y, s_dist;

    Node(int x, int y, int s_dist){
        this->x=x;
        this->y=y;
        this->s_dist=s_dist;
    }
};

class Compare{
public:
    bool operator()(const Node &a,  const Node &b){
    return a.s_dist<=b.s_dist;
    }
};

set<Node*,Compare> sa;
sa.find(Node(5,12,4)) != sa.end();


**************************************************************************************************************************************************************************************

#include<unordered_set>  -> to use unordered-set where elements are not sorted but they are unique
unordered_set<int> st;
st.insert(2);
st.insert(4); 
st.clear();
auto itr = st.begin();
auto btr = st.end();

**************************************************************************************************************************************************************************************

#include<map> -> to keep a hash table of elements sorted in ascending order by default based on unique keys

map<char,int> ch;  by default keys sorted in ascending order
ch.count('s')  //returns 0 or 1 if depending on the map contains that key or not
ch.find(), ch.end()   -> similar to set, returns an iterator to that key in the map

map<int,char, greater<int>>mmp;  // keys sorted in descending order
mmp.size()   -> provides number of elements inside map

// elements also can be accessed as itr.first and itr.second

#include<map>    //same header file as map, multimap is the same as map but it can store elements having same key values, both key and element pair can be duplicated
multimap<int,int> m;
multimap<int,int,greater<int>> mapp;

mapp.insert({9,10});
mapp.insert(pair<int,int>(2,6));
mapp.insert(make_pair(9,10));

mapp.count(3)  -> returns the frequency of occurrence of 3 in the multimap

**************************************************************************************************************************************************************************************

#include<unordered_map> -> same as map except that elements are not key sorted, so more time efficient

unordered_map<Node*,int> m;
m[node] = 5;


**************************************************************************************************************************************************************************************

#include<list> -> stores list of elements of specified data type

list<string> str[12];
list<int> *l = new list<int>[V];
 l[x].push_back(10);
 l[x].push_back(y);

**************************************************************************************************************************************************************************************


