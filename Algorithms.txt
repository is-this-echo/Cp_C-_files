
KMP pattern search
https://www.youtube.com/watch?v=GTJr8OvyEVQ&ab_channel=TusharRoy-CodingMadeSimple
------------------------------------------------------------------------------------------

Kadane's Algorithm
Used for max val subarray sum problem

"""
int currSum=0;
int maxSum=INT_MIN;

// use on this array for example : [3,5,-9,| 1,3-2,3,4,7,2,-9,6,3,1|,-5,4]

for(int i=0;i<n;i++)
{  
   currSum = max(currSum + a[i] , a[i]);
   maxSum = max( maxSum, currSum);
} 
"""
--------------------------------------------------------------------------------------------

Difference arrays

https://blogarithms.github.io/articles/2018-11/difference-arrays
**************************************
# Generate Difference Array
for i in range(len(A)):
    if i==0:
        diff[i] = A[i]
    else:
        diff[i] = A[i]-A[i-1]

# Iterate over queries, like l and r  are given and we have to increment by x
for query in range(Q):
    L, R, X = [int(i) for i in input().split()]

    # Here's where the cool bit happens
    diff[L] += X
    diff[R+1] -= X

# And updating the original array now
for i in range(len(A)):
    if i==0:
        A[i] = diff[i]
    else:
        A[i] = diff[i] + A[i-1]

*-------------------------------------------------------------------------------


Graph algorithms
1) BFS
2) DFS
3) Dijkstra's algorithm
4) Bellman Ford algorithm
5) Union
6) Topological Sort
7) Flyod Warshall

-----------------------------------------------------------------------------------


Using 2 stacks to implement a queue

1) stack<int> s1;  // push stack
2) stack<int> s2;  // pop stack


For enqueue, or q.push(x), push in stack s1 always
For dequeue, check s2 if it is empty take all elements feom s1 and put in s2, then pop from s2
Now, dequeue only from s2 till its empty and enqueue to s1 only the entire time, whn both are empty
The original queue is empty

Time complexity -> O(1)
Amortized TC -> O(n)


----------------------------------------------------------------------------------------------

Using 2 queues to implement a stack

1) queue<int>q1;
2) queue<int>q2;

push(x) -> add x to q2, take all elements from q1 to q2 one at a time, swap q1 and q2
pop() -> pop from q1


Using 1 queue to implement a stack
1) Push into q1
2) take first size-1 elements and put in the queue again while popping from front
3) Repeat 1-2 for every push

Pop() -> q1.pop()


----------------------------------------------------------------------------------------------------

Number Theory
---------------

1) a x b = LCM(a,b) x HCF(a,b)


2) LCM of two or more fractions is given by: LCM of numerators/GCF of denominators.

So, LCM(a/b,c/d) = LCM(a,b)/HCF(c,d)


3) HCF of two or more fractions is given by: HCF of numerators/LCM of denominators.
So. HCF(a/b,c/d) = HCF(a,b) / LCM(c,d) 



Number of subarrays possible for an array of size n = n(n+1)/2;




Bitwise operators
-----------------------
	xor operator , a^b compares their binary froms bit by bit, ex-> 1^1 = 0, 0^0=0, 1^0 =1, 0^1=1
	~ operator, flips the bits from 0 to 1 or vice versa.
	But, ~0 =-1 as most significant bit msb, decides the sign, if its 1 then the number is negative else positive.

  right shift operator  ->    a>>b   = a/(2^b)  , drop 'b' no. of bits from the end.
	Ex -> a= 10010, b= 2  , then a>>b = 100 , last 2 bits dropped.

  left shift operator   ->    a<<b   = a * (2^b),  append 'b' no. of zeros at the end.
	Ex -> a = 100, b = 3 , then a<<b = 100000  , binary form of a gets appended by 3 zeros.


To find if a number N is a power of 2, then N & (N-1) == 0
To find if a number x is odd, then (x & 1)==1 , as odd numbers in binary form has 1 as the last bit.




Set bits-> count of 1's in the binary representation of a decimal number
code to count set bits -> 
// The idea is we find if the last bit is set or not, then right shift the number to drop the last bit.
// timeC = O(log n)
int cnt = 0;
while(n>0){
cnt+= (n&1);
n=n>>1;
}
return cnt;




// faster method, n&(n-1) removes the last set bit in binary rep of n, timeC = O(no. of set bits)

int cnt=0;
while(n>0){
n = n & (n-1)
cnt++;
}
return cnt;




// calculate XOR from 1 to n
Ex. 1^2^3^4^5^6^7^8^9
***********************************************
int computeXOR(int n)
{
   // If n is a multiple of 4
  if (n % 4 == 0)
    return n;
 
  // If n%4 gives remainder 1
  if (n % 4 == 1)
    return 1;
 
  // If n%4 gives remainder 2
  if (n % 4 == 2)
    return n + 1;
 
  // If n%4 gives remainder 3
  return 0;
}


*************************************************


matrix rotation -> 

0/360 deg = (i,j) to (i,j)
90 deg   =  (i,j) to (j,n-i-1)
180 deg  =  (i,j) to (n-i-1, n-j-1)
270 deg  =  (i,j) to (n-j-1, i)


***************************************************


Sorting elements in a stack using another stack, TC = O(N^2), SC = o(N)


We create a temporary stack tempStack. Now we run a loop while the input stack is not empty.
At each iteration, we pop an element from the input stack and compare it with the element present on the top of the tempStack. Initially, tempStack is empty. So in the first iteration, we pop the element from the input stack and push it into the tempStack.
If tempStack is not empty and the popped element is smaller than the top element of the tempStack, we pop the top element from the tempStack and push it into the input stack. Otherwise, if the element is greater, we push it into the tempStack.
In other words, we continue the above process in an inner loop until the top of the tempStack is greater than the popped element from the input stack or tempStack is empty.
The input stack will be empty by the end of the outer loop, and the sorted elements are present in the temporary stack. So we return the tempStack as an output.



