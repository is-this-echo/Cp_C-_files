

https://www.youtube.com/watch?v=rw4s4M3hFfs&ab_channel=Cl%C3%A9mentMihailescu

You're looking to move into a new apartment, and you're given a list of blocks 
where each block contains an apartment that you could move into. In order to pick
your apartment, you want to optimize its location. You also have a list of requirements: 
a list of buildings that are important to you. For instance, you might value
having a school and a gym near your apartment. The list of blocks that you have contains 
information at every block about all of the buildings that are present
and absent at the block in question. For instance, for every block, you might know
whether a school, a pool, an office, and a gym are present or not. In order to
optimize your life, you want to minimize the farthest distance you'd have to walk from
your apartment to reach all of your required buildings. Write a function
that takes in a list of blocks and a list of your required buildings and that returns 
the location (the index) of the block that is most optimal for you.

Sample input:
[
{
"gym": False,
"school": True,
"store": False,
},
{
"gym": True,
"school": False,
"store": False,
},
{
"gym": True,
"school": True,
"store": False,
},
{
"gym": False,
"school": True,
"store": False,
},
{
"gym": False,
"school": True,
"store": True,
},
],
["gym","school","store"]
Sample output: 3 (at index 3, the farthest you would have to walk to reach a gym, a school, or a store, 
is 1 block; at any other index, you would have to walk farther)

Solution Approach — There are multiple possible answers to that question, where we can basically establish a trade-off between space and time complexities.
Suggested approach — Initialize a vector that stores the farthest distance of a particular service for every block with INT_MIN. Now for every block, go through every requirement and find the closest block that satisfies that requirements and change vector value for that block with a minimum of the current value and maximum distance for any requirement. At the end return the index the minimum value in the vector.


CODE

#include <vector>
#include <unordered_map>

using namespace std;

int distancebetween(int a, int b)
{
    return abs(a-b);
}
int minValueIndex(vector<int> A)
{
    int minimum = INT_MAX;
    int minIndex = 0;
    int n = A.size();

    for(int i=0;i<n;i++)
    {
        if(minimum > A[i])
        {
            minimum = A[i];
            minIndex = i;
        }
    }

    return minIndex;
}
int apartmentHunting(vector<unordered_map<string, bool>> blocks,
                     vector<string> reqs) 
{
	vector<int> MaxdistanceForEveryBlock(blocks.size(),INT_MIN);

    for(int i=0; i < blocks.size(); i++)
    {
        for(auto req: reqs)
        {
            int closestRequiredDistance = INT_MAX;

            for(int j=0; j < blocks.size(); j++)
            {
                if(blocks[j][req])
                {
                    closestRequiredDistance = min(closestRequiredDistance,distancebetween(i,j));
                }
            }

            MaxdistanceForEveryBlock[i] = max(MaxdistanceForEveryBlock[i],closestRequiredDistance);
        }
    }

    return minValueIndex(MaxdistanceForEveryBlock);
}